<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAMDAAAAEAGACoHAAAFgAAACgAAAAwAAAAYAAAAAEAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAtQGVcb5R0h6xleJ1HXYFHXYFGYYY+W4A+W4BDX4I8V3klPmAOI0MBFDUBFDUAAB4AABcAABUAABQA
        ABcAABkAABQAABIrLkorLkpTVnIQFCwAAA4AAA0ABRUAAA8AARgAABgAASUAASUEEzoeL1YlOF0/VXg0
        TGpHX31LYYRXbJJXbJJid51gdZtNYYowRG1uh6FkfZc+V3E5UGpKZn5KZn5GbH5ZhJNeiJVPdoRSeIRq
        jJlxjpxifYtifYtpgJBsgJFwgpNxgZJyf49xfo5zgI50gY+KlKWKlKWYpbV4hpJygYpgcnlldn9db3pX
        anlDVmtDV3BDV3A5TmpEWnYwSGQyTWcmQ1hrh59jfphad5Jad5JUco9WdpNceZhVcZCNrr0zUmESMUB5
        lqUpTlYpTlYxbGQhZFUUU0NloY9Mg3I2aVtxnpV4oJt4oJuEpKl/m6aFnq6SqryQqLqLpLSmwM5phZAA
        FyUAFyUdO0Z0kp2pyNGcucKTsLmatsGVsL6PqbmWscWWscWDoLWCobh+nrVsjqVoiqFVd45TdoosVGcs
        VGcZRlsdT2MAGjBnkKdUeIIzVmA5WWSDoawgSUsgSUs3emVVoYGBy6eM0q6P0a5tqYo9cVkcSDscSDsk
        S0lJa3E/Xm1JZ3hFY3YeP0+Aoq+WusRvlJxvlJxhh4ybwcZafoQhQ0k/YGkyUl1La3ZAYG01VmU1VmU8
        Xm4+YnQwVWknTmQiSGAdRFpAZHZDbHtDbHtfkqKTzNsAL0NFcodEaHIzVmAmRlE9W2YtVVQtVVR6vKNM
        mXNJk2kzeVAucEdlon51q45gjXxgjXwwWVImS09LbXpDZHNggZFDZnSewc54naVXen1Xen1UdnWKrKuE
        pKNqiYpzkpVhgYZig4xbe4ZTdYJTdYJTdYVEaHo6YnVGb4U2X3YVPFJff5JLbX1LbX0zYXIvY3MDNkpc
        iZ6EqLJUd4E6WmU0Ul2RubeRubdNjXAQWy8WXzF+xJUtbkESUChIfmCVxrCVxrBch344XmA2WWM2WWcr
        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
        d5M+aYQ0YYNum8eUw/d8reV6sOd6sOdqpddvrd18vu+Exvt1tfVHhcVck9A5baI5baI3Z5FgjKlcg5JM
        cndtlKJJboJXeZY+XH9JYoRJYoQ0Ql4jKkMoLkUMEydJU2QaKjfD2eXX9f/X9f+s1d7F8v+azd2n2e25
        5/9sk7OZu9+IqMyQrtGQrtGfv+KVuNmHrM55ocRjj7R1o8yn2f+MweyKxO6KxO58ueVoqNhys+qDxP9k
        pOs2cbk/dbYlVo4lVo4vXIhbhKRnjZ9tkZd6oq5BaXxUe5cuU3U5WHk5WHlPYn14hZtga39HUWMxPkw5
        S1aBm6Kx09mx09mz3eLI+P6q3efC9v+25PW+5/2/4vzD4/9tiqltiqlykLNykLlEYpFOb6C13P+Yx+2S
        x+ih3viFxuKFxuKU1/h/w+5Ul9Brr/J6vf9dmeVXi84oVpAoVpA2YI9dg6VmiZ1fgIliipZCan1giKQd
        R2otU3YtU3ZCYYBwi6abssyetct3jZ9wiZkcOkVKb3dKb3dei493pqqg0Nal09u54e1oiZhrhZZCWnIq
        RGIqRGIpQ2sSKmBUa6log8Ocv/eu2v+UzOWq6PiX3OuX3OuZ4fmM0/lssepip+xnqfhrqfdxo+ssWJUs
        WJU2XZFbf6NWdYpLanN9o69BaoBIdJEbSG1Of6dOf6d6rtdZi7U3Zox5o8Z1nLy03PVFb4JvmqlvmqmI
        tcBRfIU5YGgcPUYbND4wQEwZIC80O09VZodVZodHW4sQHmZebL5ecMNPaa+SvOeRx95+v8eb4+qb4+qI
        0eV5wOWDyP9prvRNjt9dmOhejdcgSYggSYgpTYNRcplJZX1jfoiHqrdEbYM4ZIEQPWI0aJY0aJZmpt13
        ufRvrORYkcRomsiAsdmYx+eUwtqUwtp0n7J3oK9Rc4BmgYthcHljZ3JUUFtJR1pVXn9VXn8oNmo3QIo1
        PpU5RZ08UZw9YY9ekKZpp62U2N2U2N2O0+dssdlamttVkuJOiuQ7cMpfi9g1WJo1WJozUolQbJVCWnJ5
        j5svUV4tUmhFbYoROmEVSIAVSIBNj+JBh+VChN1JhdlkmueIuf2Xxf+ayPiayPiFstjB6f+WuM+Zs8N7
        iZVeY2yWkphua3RXXm9XXm9ETmwECz1VXJtIT5RcbKc3VHk9Znxomqay5vey5veXyvJwoOBqlvFVfOlN
        cuxFadsgQ5kdPX4dPX44U4tPZY5NYXpMXGggQE03V25CY4QVN2ImTokmTolNf9dPg+dfj+9ahuEtVagT
        OoRKc7KSvPGSvPGMt+Kgy+wiS2J7nK+EnqofMjo7RUwzPEBTX2FTX2FGUlwLFC8cJUoxOmUlNl0xSWVA
        YXVXf5Ku1vOu1vM9ZJhqjddZd9xXcupXcPYxS8cwTqUTMnETMnEoQnhBVnxLW3IwPkoWM0E7V29DX4Ed
        OGQqSIMqSIM2WKtCZME8W7YvTKE1UKBRbbRObawYPXEYPXFQeqSfyut7p78vV2lEZnNngoxGXGJjdHdN
        WVlNWVlLVVVBSlQsNkdQXnEmN0xHXW89WGwtTGNGZIdGZIdKaZ4sSI9MZMRQZNQ/T9E/U8ovS58iP3wi
        P3wrRHZUZ4xCUGcOFyQqRlE4UGhMYoUqPWoSJV4SJV4rQIQhN38rPYQxQYYtPHs6TIdWbKBZdqNZdqNj
        iaxXgZ6w3PMkT2AxVmSKqrUcOD9OYWg2QUU2QUVARUg5QUFKVFRCT1FOXmROYGs2SlxQZYBSa41Sa41V
        bpoxSYNIXahCVq4tO6UuQaQXMX0mQn4mQn4bMmJUZ4pCTWMVHihfeYU+UmtXZ4xYZJRTXpJTXpIAACYA
        ACYCDT8AAC4AACIAACsAETgADzMADzMABCEABR0AHTAUPUyQs8FWdoMAAAoADBcAAA0AAA0AAAgKDg8M
        Ew4ABAAWIyETICgGFCYkNU9HW3pHW3oAABkUK1EAEkIAD0kACVIAADwAD1A0UYo0UYpDWohXaIkrNEgC
        CBOBmaUuP1lAS3FSV4hPVYRPVYRpeJkeL0kwPFg/SmY/R2RJVG8/TmhOYntOYnslQFU4WGsoSlpKa3os
        RlY+VWSmtsY/RlpTTG9TTG9gVXWUkp5QVVNQWU9SXlhTXGVLVWYwPFQ0RVo0RVovRlUlP0smQU8fOk8e
        N1kvSHQvTYQ+WZE+WZFQZZI7TG09RlodJC12kZswRVpwgJ2Bi7NRXYFRXYFdcYMjN0JIWWZSX21PXGxl
        coJJWGhJXGtJXGtLYnJVb31YcoBpgI81SFdpeIiyvct5fpOlocSlocSfmrq5vMpIUlJbaWVdbmtTY2pZ
        andVZ3hQZ3ZQZ3ZEYWZHZmdEZGM5Wl0kQk0mRVxefaRAXYlAXYlqgqY2SWRHVWcgKzMAAAAABA8dOkkm
        QFEyTF0yTF1cd4Fvi5JzjZSCmaGHnKSJnKSjtr6ou8Oou8Oru8enuMGntr+vu8W6xM7Ezdepr7pmbntR
        XW9RXW9ba3urwMijvMCct7uZuLuPr7WYucKFqbF/pKx/pKxymJ2MsrZ0mp5tkpZvk5tgg5BXeo4oSmEo
        SmFbe44kQVA2TlpFWmIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAA=
</value>
  </data>
</root>